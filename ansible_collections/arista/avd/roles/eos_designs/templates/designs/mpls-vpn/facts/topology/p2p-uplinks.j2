{% set topology_peers = [] %}
{# all_backbone_interfaces and all_nodes currently not used for anything... #}
topology:

{# topology.links #}
  links:
{% for backbone_interface in switch.backbone_interfaces | arista.avd.default([]) %}
{%     set uplink_switch = backbone_interface["uplink_switch"] %}
{%     if uplink_switch is arista.avd.defined and uplink_switch in groups[fabric_name] and
          hostvars[uplink_switch].switch is arista.avd.defined(fail_action='warning',var_name='hostvars[' ~ uplink_switch ~ '].switch') %}
{%         do topology_peers.append(uplink_switch) %}
    {{ backbone_interface.interface }}:
      peer: {{ uplink_switch }}
      peer_interface: {{ backbone_interface.uplink_switch_interface | arista.avd.default("") }}
      type: underlay_p2p
{%         if switch.uplink_interface_speed is arista.avd.defined %}
      speed: {{ switch.uplink_interface_speed }}
{%         endif %}
{%         if switch.uplink_bfd is arista.avd.defined(true) %}
      bfd: true
{%         endif %}
{%         if switch.uplink_ptp.enable is arista.avd.defined %}
      ptp: {{ switch.uplink_ptp.enable }}
{%         endif %}
      ipv6_enable: true
{# {%             set uplink_switch_index = loop.index0 %} #}
      ip_address: {% include switch.ip_addressing.p2p_uplinks_ip %}

{%     endif %}
{% endfor %}

{# topology.peers #}
{# Used during structured_config rendering to quickly scan if this switch has a peering towards the switch being rendered #}
  peers: {{ topology_peers }}

{# topology.vlans #}
{# Vlan list taking parent switch vlans into consideration #}
{# Since this switch is not using port-channels it is just the same as switch.vlans #}
  vlans: {{ switch.vlans | arista.avd.default([]) }}
