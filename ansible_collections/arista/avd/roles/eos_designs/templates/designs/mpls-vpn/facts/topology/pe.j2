{% set topology_peers = [] %}

topology:

{# topology.links #}
  links:
{% for backbone_interface in switch.backbone_interfaces | arista.avd.default([]) %}
{%     set uplink_switch = backbone_interface["uplink_switch"] %}
{%     if uplink_switch is arista.avd.defined and uplink_switch in groups[fabric_name] and
          hostvars[uplink_switch].switch is arista.avd.defined(fail_action='warning',var_name='hostvars[' ~ uplink_switch ~ '].switch') %}
{%         do topology_peers.append(uplink_switch) %}
    {{ backbone_interface.interface }}:
      peer: {{ uplink_switch }}
      peer_interface: {{ backbone_interface.uplink_switch_interface | arista.avd.default("") }}
      {# peer_type: {{ hostvars[uplink_switch].type }} #}
      {# peer_bgp_as: {{ hostvars[uplink_switch].switch.bgp_as | arista.avd.default() }} #}
      type: underlay_p2p
{%         if switch.uplink_interface_speed is arista.avd.defined %}
      speed: {{ switch.uplink_interface_speed }}
{%         endif %}
{%         if switch.uplink_bfd is arista.avd.defined(true) %}
      bfd: true
{%         endif %}
{%         if switch.uplink_ptp.enable is arista.avd.defined %}
      ptp: {{ switch.uplink_ptp.enable }}
{%         endif %}
{%         if underlay_rfc5549 is arista.avd.defined(true) %}
      ipv6_enable: true
{%         else %}
{%             if backbone_interface.ip_address is arista.avd.defined() %}
      ip_address: {{ backbone_interface.ip_address }}
{%             else %}
      ip_address: {{"unnumbered loopback " ~ underlay_loopback_number |Â arista.avd.default("0") }}
{%             endif %}
{%         endif %}
{%     endif %}
{% endfor %}

{# topology.peers #}
{# Used during structured_config rendering to quickly scan if this switch has a peering towards the switch being rendered #}
  peers: {{ topology_peers }}